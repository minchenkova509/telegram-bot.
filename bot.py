import logging
import os
import json
import gspread
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web
from oauth2client.service_account import ServiceAccountCredentials

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ===================
ADMINS = [769063484]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
DRIVERS = ["–ï—Ä—ë–º–∏–Ω", "–£—Ä–∞–Ω–æ–≤", "–ù–æ–≤–∏–∫–æ–≤"]
bot_token = os.getenv("BOT_TOKEN")
if not bot_token:
    raise ValueError("BOT_TOKEN environment variable is missing!")

# =============== GOOGLE SHEETS ===================
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(credentials)
sheet = client.open("Falcontrans Docs").sheet1

# =============== –°–û–°–¢–û–Ø–ù–ò–Ø FSM ====================
class AdminStates(StatesGroup):
    waiting_for_photo = State()
    waiting_for_request_number = State()
    waiting_for_driver = State()

class DriverStates(StatesGroup):
    choosing_request = State()
    waiting_for_docs = State()

# =============== –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê ===================
logging.basicConfig(level=logging.INFO)
bot = Bot(token=bot_token, default=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# =============== –°–õ–û–í–ê–†–ò ==========================
zayavki = {}  # –∫–ª—é—á: id –≤–æ–¥–∏—Ç–µ–ª—è, –∑–Ω–∞—á–µ–Ω–∏–µ: —Å–ø–∏—Å–æ–∫ (–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏, file_id)
current_driver_request = {}  # –≤–æ–¥–∏—Ç–µ–ª—å_id: –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏

# =============== –•–≠–ù–î–õ–ï–†–´ =========================
@router.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await state.set_state(AdminStates.waiting_for_photo)
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∑–∞—è–≤–∫–∏.")
    else:
        kb = InlineKeyboardBuilder()
        for name in DRIVERS:
            kb.button(text=name, callback_data=f"driver:{name}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:", reply_markup=kb.as_markup())

@router.message(AdminStates.waiting_for_photo, F.photo)
async def admin_get_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    await state.update_data(photo=file_id)
    await state.set_state(AdminStates.waiting_for_request_number)
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:")

@router.message(AdminStates.waiting_for_request_number)
async def admin_get_request_number(message: Message, state: FSMContext):
    await state.update_data(request_number=message.text)
    await state.set_state(AdminStates.waiting_for_driver)
    kb = InlineKeyboardBuilder()
    for name in DRIVERS:
        kb.button(text=name, callback_data=f"assign:{name}")
    await message.answer("–ö–æ–º—É –Ω0430–∑–Ω–∞—á–∏—Ç—å?", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("assign:"))
async def assign_request(callback: CallbackQuery, state: FSMContext):
    driver = callback.data.split(":")[1]
    data = await state.get_data()
    request_number = data["request_number"]
    file_id = data["photo"]
    zayavki.setdefault(driver, []).append((request_number, file_id))
    sheet.append_row([request_number, driver])
    await callback.message.answer(f"–ó–∞—è–≤–∫–∞ {request_number} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è {driver}.")
    await state.clear()

@router.callback_query(F.data.startswith("driver:"))
async def driver_menu(callback: CallbackQuery, state: FSMContext):
    driver = callback.data.split(":")[1]
    await state.set_state(DriverStates.choosing_request)
    await state.update_data(driver=driver)
    kb = InlineKeyboardBuilder()
    for req_num, _ in zayavki.get(driver, []):
        kb.button(text=req_num, callback_data=f"req:{req_num}")
    kb.button(text="–î—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä", callback_data="req:manual")
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("req:"))
async def handle_request(callback: CallbackQuery, state: FSMContext):
    req = callback.data.split(":")[1]
    if req == "manual":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ä—É—á–Ω–æ–π:")
        await state.set_state(DriverStates.waiting_for_docs)
        return
    await state.update_data(request=req)
    await callback.message.answer(f"–û—Ç–ø—Ä–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞—è–≤–∫–∏ {req}:")
    await state.set_state(DriverStates.waiting_for_docs)

@router.message(DriverStates.waiting_for_docs, F.photo)
async def get_docs(message: Message, state: FSMContext):
    data = await state.get_data()
    request = data.get("request") or message.text
    for admin in ADMINS:
        await bot.send_photo(admin, message.photo[-1].file_id, caption=f"–ó–∞—è–≤–∫–∞ {request} –æ—Ç {data['driver']}")
    await message.answer("–°–ø–∞—Å–∏–±–æ!")
    await state.clear()

# =============== WEBHOOK =========================
async def on_startup(app):
    webhook_url = os.getenv("WEBHOOK_URL")
    if not webhook_url:
        raise ValueError("WEBHOOK_URL is not set!")
    await bot.set_webhook(webhook_url + "/webhook")

async def on_shutdown(app):
    await bot.delete_webhook()

app = web.Application()
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == '__main__':
    web.run_app(app, port=8080)
