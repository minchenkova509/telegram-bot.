import os
import json
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from googleapiclient.discovery import build
from oauth2client.service_account import ServiceAccountCredentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
TOKEN = os.getenv("API_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API
SCOPE = ['https://www.googleapis.com/auth/spreadsheets']
CREDS = ServiceAccountCredentials.from_json_keyfile_dict(
    json.loads(GOOGLE_CREDENTIALS_JSON),
    SCOPE
)
sheet_service = build('sheets', 'v4', credentials=CREDS)
sheet = sheet_service.spreadsheets()

# –•—ç–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏, –∞ –∑–∞—Ç–µ–º –ø—Ä–∏–∫—Ä–µ–ø–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ (–ø–æ user_id)
user_requests = {}

@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    if message.text.isdigit():
        user_requests[message.from_user.id] = message.text
        await message.reply(f"üìÑ –ó–∞—è–≤–∫–∞ ‚Ññ{message.text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.")
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")

@dp.message_handler(content_types=[types.ContentType.DOCUMENT, types.ContentType.PHOTO])
async def handle_file(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_requests:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ (—Ü–∏—Ñ—Ä–∞–º–∏).")
        return

    request_number = user_requests[user_id]
    file_id = None
    file_type = None

    if message.document:
        file_id = message.document.file_id
        file_type = "document"
    elif message.photo:
        file_id = message.photo[-1].file_id  # –ø–æ—Å–ª–µ–¥–Ω—è—è ‚Äî –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        file_type = "photo"

    file = await bot.get_file(file_id)
    file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ Google –¢–∞–±–ª–∏—Ü—É
    values = [[
        str(message.from_user.id),
        message.from_user.full_name,
        request_number,
        file_type,
        file_url
    ]]
    sheet.values().append(
        spreadsheetId=SPREADSHEET_ID,
        range="A1",
        valueInputOption="RAW",
        body={"values": values}
    ).execute()

    await message.reply("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É!")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
