import logging
import os
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web

from google.oauth2.service_account import Credentials
import gspread
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
ADMINS = ["769063484"]  # Telegram ID –∞–¥–º–∏–Ω–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
GOOGLE_CREDS = os.getenv("GOOGLE_CREDENTIALS_JSON")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=ParseMode.HTML)
dp = Dispatcher()

# Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_info(eval(GOOGLE_CREDS), scopes=scopes)
client = gspread.authorize(creds)
sheet = client.open("Falcontrans Docs").sheet1

# –ü–∞–º—è—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∑–∞—è–≤–æ–∫
drivers = ["–ï—Ä—ë–º–∏–Ω", "–£—Ä–∞–Ω–æ–≤", "–ù–æ–≤–∏–∫–æ–≤"]
driver_zayavki = {}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
@dp.message(F.text == "/start")
async def start(message: Message):
    if str(message.from_user.id) in ADMINS:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∑–∞—è–≤–∫–∏.")
    else:
        builder = InlineKeyboardBuilder()
        for name in drivers:
            builder.button(text=name, callback_data=f"driver_{name}")
        await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞
@dp.message(F.photo)
async def handle_photo(message: Message):
    if str(message.from_user.id) not in ADMINS:
        return

    file_id = message.photo[-1].file_id
    await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:")
    dp["pending_photo"] = file_id
    dp["admin_id"] = message.from_user.id

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
@dp.message(F.text.regexp(r"^\d+$"))
async def handle_zayavka_number(message: Message):
    if str(message.from_user.id) not in ADMINS or "pending_photo" not in dp:
        return

    number = message.text
    file_id = dp.pop("pending_photo")
    builder = InlineKeyboardBuilder()
    for d in drivers:
        builder.button(text=d, callback_data=f"assign_{number}_{d}")
    await message.answer("–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?", reply_markup=builder.as_markup())
    dp["pending_zayavka"] = {"file_id": file_id, "number": number}

# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—é
@dp.callback_query(F.data.startswith("assign_"))
async def assign_zayavka(callback: CallbackQuery):
    _, number, driver = callback.data.split("_")
    data = dp.pop("pending_zayavka", None)
    if data:
        driver_zayavki.setdefault(driver, {})[number] = data["file_id"]
        await callback.message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ {number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {driver}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        sheet.append_row([datetime.now().isoformat(), driver, number])
    await callback.answer()

# –í–æ–¥–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–µ–±—è
@dp.callback_query(F.data.startswith("driver_"))
async def driver_menu(callback: CallbackQuery):
    name = callback.data.split("_")[1]
    dp[name] = callback.from_user.id  # –°–≤—è–∑–∫–∞ –∏–º–µ–Ω–∏ –∏ user_id
    zayavki = driver_zayavki.get(name, {})
    if not zayavki:
        await callback.message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫. –í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:")
        dp["manual_driver"] = name
        return

    builder = InlineKeyboardBuilder()
    for num in zayavki:
        builder.button(text=num, callback_data=f"zayavka_{num}_{name}")
    builder.button(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"manual_{name}")
    await callback.message.answer("üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:", reply_markup=builder.as_markup())
    await callback.answer()

# –í—ã–±–æ—Ä –∑–∞—è–≤–∫–∏
@dp.callback_query(F.data.startswith("zayavka_"))
async def choose_zayavka(callback: CallbackQuery):
    _, number, driver = callback.data.split("_")
    await callback.message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞—è–≤–∫–µ:")
    dp["current_doc"] = {"number": number, "driver": driver, "user_id": callback.from_user.id}
    await callback.answer()

# –í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é
@dp.callback_query(F.data.startswith("manual_"))
async def manual_zayavka(callback: CallbackQuery):
    driver = callback.data.split("_")[1]
    dp["manual_driver"] = driver
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤—Ä—É—á–Ω—É—é:")
    await callback.answer()

# –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –≤—Ä—É—á–Ω—É—é
@dp.message(F.text)
async def manual_entry(message: Message):
    if "manual_driver" in dp:
        driver = dp.pop("manual_driver")
        number = message.text.strip()
        dp["current_doc"] = {"number": number, "driver": driver, "user_id": message.from_user.id}
        await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞—è–≤–∫–µ:")

# –ü—Ä–∏—ë–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@dp.message(F.document | F.photo)
async def handle_docs(message: Message):
    if "current_doc" not in dp:
        return
    data = dp.pop("current_doc")
    number = data["number"]
    driver = data["driver"]
    admin_id = ADMINS[0]
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã!")

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
    caption = f"–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞—è–≤–∫–µ {number} –æ—Ç {driver}"
    if message.document:
        await bot.send_document(admin_id, message.document.file_id, caption=caption)
    elif message.photo:
        await bot.send_photo(admin_id, message.photo[-1].file_id, caption=caption)

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(app):
    await bot.delete_webhook()

app = web.Application()
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    web.run_app(app, port=8080)
