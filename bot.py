import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# === CONFIG ===
API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
ADMINS = [769063484]  # —Ç–≤–æ–π Telegram ID

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=API_TOKEN, default=Bot.DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# === FSM ===
class Form(StatesGroup):
    choosing_driver = State()
    waiting_photo = State()
    entering_number = State()
    sending_docs = State()

# === –ü–∞–º—è—Ç—å –∑–∞—è–≤–æ–∫ ===
active_requests = {
    "–ï—Ä—ë–º–∏–Ω": [],
    "–£—Ä–∞–Ω–æ–≤": [],
    "–ù–æ–≤–∏–∫–æ–≤": []
}

photo_storage = {}

# === –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç ===
@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∑–∞—è–≤–∫–∏.")
        await state.set_state(Form.waiting_photo)
    else:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("–ï—Ä—ë–º–∏–Ω", "–£—Ä–∞–Ω–æ–≤", "–ù–æ–≤–∏–∫–æ–≤")
        await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:", reply_markup=kb)
        await state.set_state(Form.choosing_driver)

# === –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ ===
@dp.message(Form.waiting_photo, F.photo)
async def admin_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    await state.update_data(photo_id=file_id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ï—Ä—ë–º–∏–Ω", "–£—Ä–∞–Ω–æ–≤", "–ù–æ–≤–∏–∫–æ–≤")
    await message.answer("–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?", reply_markup=kb)
    await state.set_state(Form.choosing_driver)

# === –ê–¥–º–∏–Ω –≤—ã–±–∏—Ä–∞–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è ===
@dp.message(Form.choosing_driver, F.text.in_(["–ï—Ä—ë–º–∏–Ω", "–£—Ä–∞–Ω–æ–≤", "–ù–æ–≤–∏–∫–æ–≤"]))
async def assign_driver(message: Message, state: FSMContext):
    driver = message.text
    data = await state.get_data()
    file_id = data.get("photo_id")

    if not file_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∑–∞—è–≤–∫–∏.")
        return

    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:")
    await state.update_data(driver=driver)
    await state.set_state(Form.entering_number)

# === –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ ===
@dp.message(Form.entering_number)
async def enter_number(message: Message, state: FSMContext):
    data = await state.get_data()
    driver = data["driver"]
    file_id = data["photo_id"]
    req_number = message.text

    active_requests[driver].append(req_number)
    photo_storage[req_number] = file_id

    await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ{req_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—é {driver}")
    await state.clear()

# === –í–æ–¥–∏—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ñ–∞–º–∏–ª–∏—é ===
@dp.message(Form.choosing_driver, F.text.in_(["–ï—Ä—ë–º–∏–Ω", "–£—Ä–∞–Ω–æ–≤", "–ù–æ–≤–∏–∫–æ–≤"]))
async def driver_selected(message: Message, state: FSMContext):
    driver = message.text
    requests = active_requests.get(driver, [])

    if not requests:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for req in requests:
        kb.add(req)
    kb.add("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")

    await state.update_data(driver=driver)
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:", reply_markup=kb)
    await state.set_state(Form.sending_docs)

# === –í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏ ===
@dp.message(Form.sending_docs, F.text)
async def receive_docs(message: Message, state: FSMContext):
    req_number = message.text
    data = await state.get_data()

    if req_number not in photo_storage and req_number != "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
        await message.answer("–¢–∞–∫–æ–π –∑–∞—è–≤–∫–∏ –Ω–µ—Ç. –í–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞—è–≤–∫–µ {req_number}")
    await state.update_data(req_number=req_number)

# === –í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ===
@dp.message(F.photo)
async def docs_received(message: Message, state: FSMContext):
    data = await state.get_data()
    req_number = data.get("req_number", "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞")

    caption = f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞—è–≤–∫–µ {req_number}\n–û—Ç: @{message.from_user.username or message.from_user.id}"
    for admin_id in ADMINS:
        await bot.send_photo(admin_id, message.photo[-1].file_id, caption=caption)

    await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã. –°–ø–∞—Å–∏–±–æ!")
    await state.clear()

# === Webhook setup ===
async def on_startup(app):
    webhook_info = await bot.get_webhook_info()
    if webhook_info.url != WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(app):
    await bot.delete_webhook()

# === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
app = web.Application()
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=8080)
